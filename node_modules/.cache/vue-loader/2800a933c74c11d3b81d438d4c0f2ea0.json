{"remainingRequest":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/src/views/ClientForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/src/views/ClientForm.vue","mtime":1573546378000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\nimport moment from 'moment'\nimport find from 'lodash/find'\nimport TitleBar from '@/components/TitleBar'\nimport HeroBar from '@/components/HeroBar'\nimport Tiles from '@/components/Tiles'\nimport CardComponent from '@/components/CardComponent'\nimport FilePicker from '@/components/FilePicker'\nimport UserAvatar from '@/components/UserAvatar'\nimport Notification from '@/components/Notification'\n\nexport default {\n  name: 'ClientForm',\n  components: { UserAvatar, FilePicker, CardComponent, Tiles, HeroBar, TitleBar, Notification },\n  props: {\n    id: {\n      default: null\n    }\n  },\n  data () {\n    return {\n      isLoading: false,\n      form: this.getClearFormObject(),\n      createdReadable: null,\n      isProfileExists: false\n    }\n  },\n  computed: {\n    titleStack () {\n      let lastCrumb\n\n      if (this.isProfileExists) {\n        lastCrumb = this.form.name\n      } else {\n        lastCrumb = 'New client'\n      }\n\n      return [\n        'Admin',\n        'Clients',\n        lastCrumb\n      ]\n    },\n    heroTitle () {\n      if (this.isProfileExists) {\n        return this.form.name\n      } else {\n        return 'Create Client'\n      }\n    },\n    heroRouterLinkTo () {\n      if (this.isProfileExists) {\n        return { name: 'client.new' }\n      } else {\n        return '/'\n      }\n    },\n    heroRouterLinkLabel () {\n      if (this.isProfileExists) {\n        return 'New client'\n      } else {\n        return 'Dashboard'\n      }\n    },\n    formCardTitle () {\n      if (this.isProfileExists) {\n        return 'Edit Client'\n      } else {\n        return 'New Client'\n      }\n    }\n  },\n  created () {\n    this.getData()\n  },\n  methods: {\n    getClearFormObject () {\n      return {\n        id: null,\n        name: null,\n        company: null,\n        city: null,\n        created_date: new Date(),\n        created_mm_dd_yyyy: null,\n        progress: 0\n      }\n    },\n    getData () {\n      if (this.id) {\n        axios\n          .get('/data-sources/clients.json')\n          .then(r => {\n            const item = find(r.data.data, item => item.id === parseInt(this.id))\n\n            if (item) {\n              this.isProfileExists = true\n              this.form = item\n              this.form.created_date = new Date(item.created_mm_dd_yyyy)\n              this.createdReadable = moment(new Date(item.created_mm_dd_yyyy)).format('MMM D, Y').toString()\n            } else {\n              this.$router.push({ name: 'client.new' })\n            }\n          })\n          .catch(e => {\n            this.$buefy.toast.open({\n              message: `Error: ${e.message}`,\n              type: 'is-danger',\n              queue: false\n            })\n          })\n      }\n    },\n    input (v) {\n      this.createdReadable = moment(v).format('MMM D, Y').toString()\n    },\n    submit () {\n      this.isLoading = true\n\n      setTimeout(() => {\n        this.isLoading = false\n\n        this.$buefy.snackbar.open({\n          message: 'Demo only',\n          queue: false\n        })\n      }, 500)\n    }\n  },\n  watch: {\n    id (newValue) {\n      this.isProfileExists = false\n\n      if (!newValue) {\n        this.form = this.getClearFormObject()\n      } else {\n        this.getData()\n      }\n    }\n  }\n}\n",{"version":3,"sources":["ClientForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"ClientForm.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <title-bar :title-stack=\"titleStack\"/>\n    <hero-bar>\n      {{ heroTitle }}\n      <router-link slot=\"right\" :to=\"heroRouterLinkTo\" class=\"button\">\n        {{ heroRouterLinkLabel }}\n      </router-link>\n    </hero-bar>\n    <section class=\"section is-main-section\">\n      <notification class=\"is-info\">\n        <div>\n          <span><b>Demo only.</b> No data will be saved/updated</span>\n        </div>\n\n      </notification>\n      <tiles>\n        <card-component :title=\"formCardTitle\" icon=\"account-edit\" class=\"tile is-child\">\n          <form @submit.prevent=\"submit\">\n            <b-field label=\"ID\" horizontal>\n              <b-input v-model=\"form.id\" custom-class=\"is-static\" readonly />\n            </b-field>\n            <hr>\n            <b-field label=\"Avatar\" horizontal>\n              <file-picker/>\n            </b-field>\n            <hr>\n            <b-field label=\"Name\" message=\"Client name\" horizontal>\n              <b-input placeholder=\"e.g. John Doe\" v-model=\"form.name\" required />\n            </b-field>\n            <b-field label=\"Company\" message=\"Client's company name\" horizontal>\n              <b-input placeholder=\"e.g. Berton & Steinway\" v-model=\"form.company\" required />\n            </b-field>\n            <b-field label=\"City\" message=\"Client's city\" horizontal>\n              <b-input placeholder=\"e.g. Geoffreyton\" v-model=\"form.city\" required />\n            </b-field>\n            <b-field label=\"Created\" horizontal>\n              <b-datepicker\n                @input=\"input\"\n                v-model=\"form.created_date\"\n                placeholder=\"Click to select...\"\n                icon=\"calendar-today\">\n              </b-datepicker>\n            </b-field>\n            <hr>\n            <b-field label=\"Progress\" horizontal>\n              <b-slider v-model=\"form.progress\"/>\n            </b-field>\n            <hr>\n            <b-field horizontal>\n              <b-button type=\"is-primary\" :loading=\"isLoading\" native-type=\"submit\">Submit</b-button>\n            </b-field>\n          </form>\n        </card-component>\n        <card-component v-if=\"isProfileExists\" title=\"Client Profile\" icon=\"account\" class=\"tile is-child\">\n          <user-avatar :avatar=\"form.file\" class=\"image has-max-width is-aligned-center\"/>\n          <hr>\n          <b-field label=\"Name\">\n            <b-input :value=\"form.name\" custom-class=\"is-static\" readonly/>\n          </b-field>\n          <b-field label=\"Company\">\n            <b-input :value=\"form.company\" custom-class=\"is-static\" readonly/>\n          </b-field>\n          <b-field label=\"City\">\n            <b-input :value=\"form.city\" custom-class=\"is-static\" readonly/>\n          </b-field>\n          <b-field label=\"Created\">\n            <b-input :value=\"createdReadable\" custom-class=\"is-static\" readonly/>\n          </b-field>\n          <hr>\n          <b-field label=\"Progress\">\n            <progress class=\"progress is-small is-primary\" :value=\"form.progress\" max=\"100\">{{ form.progress }}</progress>\n          </b-field>\n        </card-component>\n      </tiles>\n    </section>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport moment from 'moment'\nimport find from 'lodash/find'\nimport TitleBar from '@/components/TitleBar'\nimport HeroBar from '@/components/HeroBar'\nimport Tiles from '@/components/Tiles'\nimport CardComponent from '@/components/CardComponent'\nimport FilePicker from '@/components/FilePicker'\nimport UserAvatar from '@/components/UserAvatar'\nimport Notification from '@/components/Notification'\n\nexport default {\n  name: 'ClientForm',\n  components: { UserAvatar, FilePicker, CardComponent, Tiles, HeroBar, TitleBar, Notification },\n  props: {\n    id: {\n      default: null\n    }\n  },\n  data () {\n    return {\n      isLoading: false,\n      form: this.getClearFormObject(),\n      createdReadable: null,\n      isProfileExists: false\n    }\n  },\n  computed: {\n    titleStack () {\n      let lastCrumb\n\n      if (this.isProfileExists) {\n        lastCrumb = this.form.name\n      } else {\n        lastCrumb = 'New client'\n      }\n\n      return [\n        'Admin',\n        'Clients',\n        lastCrumb\n      ]\n    },\n    heroTitle () {\n      if (this.isProfileExists) {\n        return this.form.name\n      } else {\n        return 'Create Client'\n      }\n    },\n    heroRouterLinkTo () {\n      if (this.isProfileExists) {\n        return { name: 'client.new' }\n      } else {\n        return '/'\n      }\n    },\n    heroRouterLinkLabel () {\n      if (this.isProfileExists) {\n        return 'New client'\n      } else {\n        return 'Dashboard'\n      }\n    },\n    formCardTitle () {\n      if (this.isProfileExists) {\n        return 'Edit Client'\n      } else {\n        return 'New Client'\n      }\n    }\n  },\n  created () {\n    this.getData()\n  },\n  methods: {\n    getClearFormObject () {\n      return {\n        id: null,\n        name: null,\n        company: null,\n        city: null,\n        created_date: new Date(),\n        created_mm_dd_yyyy: null,\n        progress: 0\n      }\n    },\n    getData () {\n      if (this.id) {\n        axios\n          .get('/data-sources/clients.json')\n          .then(r => {\n            const item = find(r.data.data, item => item.id === parseInt(this.id))\n\n            if (item) {\n              this.isProfileExists = true\n              this.form = item\n              this.form.created_date = new Date(item.created_mm_dd_yyyy)\n              this.createdReadable = moment(new Date(item.created_mm_dd_yyyy)).format('MMM D, Y').toString()\n            } else {\n              this.$router.push({ name: 'client.new' })\n            }\n          })\n          .catch(e => {\n            this.$buefy.toast.open({\n              message: `Error: ${e.message}`,\n              type: 'is-danger',\n              queue: false\n            })\n          })\n      }\n    },\n    input (v) {\n      this.createdReadable = moment(v).format('MMM D, Y').toString()\n    },\n    submit () {\n      this.isLoading = true\n\n      setTimeout(() => {\n        this.isLoading = false\n\n        this.$buefy.snackbar.open({\n          message: 'Demo only',\n          queue: false\n        })\n      }, 500)\n    }\n  },\n  watch: {\n    id (newValue) {\n      this.isProfileExists = false\n\n      if (!newValue) {\n        this.form = this.getClearFormObject()\n      } else {\n        this.getData()\n      }\n    }\n  }\n}\n</script>\n"]}]}