{"remainingRequest":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/src/components/Tiles.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/src/components/Tiles.vue","mtime":1573546378000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport chunk from 'lodash/chunk'\n\nexport default {\n  name: 'Tiles',\n  props: {\n    maxPerRow: {\n      type: Number,\n      default: 5\n    }\n  },\n  render (createElement) {\n    if (this.$slots.default.length <= this.maxPerRow) {\n      return this.renderAncestor(createElement, this.$slots.default)\n    } else {\n      return createElement('div', { attrs: { 'class': 'is-tiles-wrapper' } }, chunk(this.$slots.default, this.maxPerRow).map((group) => {\n        return this.renderAncestor(createElement, group)\n      }))\n    }\n  },\n  methods: {\n    renderAncestor (createElement, elements) {\n      return createElement('div', { attrs: { 'class': 'tile is-ancestor' } }, elements.map((element) => {\n        return createElement('div', { attrs: { 'class': 'tile is-parent' } }, [element])\n      }))\n    }\n  }\n}\n",{"version":3,"sources":["Tiles.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Tiles.vue","sourceRoot":"src/components","sourcesContent":["<script>\nimport chunk from 'lodash/chunk'\n\nexport default {\n  name: 'Tiles',\n  props: {\n    maxPerRow: {\n      type: Number,\n      default: 5\n    }\n  },\n  render (createElement) {\n    if (this.$slots.default.length <= this.maxPerRow) {\n      return this.renderAncestor(createElement, this.$slots.default)\n    } else {\n      return createElement('div', { attrs: { 'class': 'is-tiles-wrapper' } }, chunk(this.$slots.default, this.maxPerRow).map((group) => {\n        return this.renderAncestor(createElement, group)\n      }))\n    }\n  },\n  methods: {\n    renderAncestor (createElement, elements) {\n      return createElement('div', { attrs: { 'class': 'tile is-ancestor' } }, elements.map((element) => {\n        return createElement('div', { attrs: { 'class': 'tile is-parent' } }, [element])\n      }))\n    }\n  }\n}\n</script>\n"]}]}