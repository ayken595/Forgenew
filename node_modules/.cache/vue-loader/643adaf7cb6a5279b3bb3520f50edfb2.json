{"remainingRequest":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/src/views/list.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/src/views/list.vue","mtime":1574352500766},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/maciej/Pulpit/admin-one-vue-bulma-dashboard-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.filters{\n  width:100%;\n  margin:auto;\n  padding:5%;\n}\n.tabelka {\n  overflow-x: auto;\n}\ntable {\n  width: 90%;\n  margin: auto;\n  border: 1px solid #fff;\n  background-color: #fff;\n}\ntr,\nth {\n  padding: 8px;\n}\ntr:nth-child(even) {\n  background-color: #ddd;\n  color: #222;\n}\n.pagination {\n  width: 30%;\n  margin: auto;\n  float: none;\n  padding-top: 30px;\n  display:block;\n}\ntr:hover {\n  background-color: #ddd;\n  color: #000;\n}\n\n@media only screen and (max-width: 760px) {\n  /* Force table to not be like tables anymore */\n  table,\n  thead,\n  tbody,\n  th,\n  td,\n  tr {\n    display: block;\n  }\n\n  /* Hide table headers (but not display: none;, for accessibility) */\n  thead tr {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n\n  tr {\n    border: 1px solid #ccc;\n  }\n\n  td {\n    /* Behave  like a \"row\" */\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n\n  td:before {\n    /* Now like a table header */\n    position: absolute;\n    /* Top/left values mimic padding */\n    top: 6px;\n    left: 6px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n  }\n}\n",{"version":3,"sources":["list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"list.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div><div class=\"filters\">\n    <filters/>\n    </div>\n    <div class=\"pagination\">\n      \n      <p>\n        <button @click=\"firstPage()\"> &larr;&larr;</button>\n        <button @click=\"previousPage()\">&larr;</button>\n        <input class=\"paginator\" type=\"number\" v-model=\"incurrent\" @input=\"pageInput()\" placeholder=\"Page\"/>\n        <button @click=\"nextPage()\">&rarr;</button>\n        <button @click=\"lastPage()\">&rarr;&rarr;</button>\n        {{current}} of {{total}}<br/>\n        total records {{ records }}\n      </p>\n    </div>\n    <div class=\"tabelka\">\n      <table>\n        <thead>\n          <tr class=\"column-names\">\n            <th v-if=\"showDetailsButton\"></th>\n            <th v-for=\"(column, cidx) in columns\" :key=\"cidx\">\n              <span v-if=\"!column.is_sortable\">{{ column.name }}</span>\n              <a v-else href=\"#\" @click.prevent=\"setColumnSort(column.code)\">\n                {{ column.name }}\n                <template v-if=\"columnSortName === column.code\">\n                  <span v-if=\"columnSortOrder === 'asc'\">&uarr;</span>\n                  <span v-else>&darr;</span>\n                </template>\n              </a>\n            </th>\n          </tr>\n          <tr class=\"column-filters\">\n            <th v-if=\"showDetailsButton\"></th>\n            <th v-for=\"(column, cidx) in columns\" :key=\"cidx\">\n              <div v-if=\"column.is_filterable\">\n                <div v-if=\"column.datatype === 'string'\">\n                  <input type=\"text\" v-model=\"column.query\" @input=\"onInput()\" />\n                </div>\n                <div v-if=\"column.datatype === 'boolean'\">\n                  <select @change=\"onChange(column, $event)\">\n                    <option :value=\"null\">All</option>\n                    <option :value=\"true\">True</option>\n                    <option :value=\"false\">False</option>\n                  </select>\n                </div>\n                <div v-if=\"typeof column.datatype === 'Object'\">\n                  <select>\n                    <option :value=\"null\">All</option>\n                    <option\n                      v-for=\"(type, cdidx) in column.datatype\"\n                      :key=\"cdidx\"\n                      :value=\"null\"\n                    >{{ type }}</option>\n                  </select>\n                  {{column.query}}\n                </div>\n              </div>\n            </th>\n          </tr>\n        </thead>\n        <tbody v-for=\"(item, id) in listitems\" :key=\"id\">\n          <tr>\n            <td v-if=\"showDetailsButton\">\n              <button\n                v-if=\"typeof item.details !== 'undefined'\"\n                type=\"button\"\n                class=\"btn btn-primary\"\n                @click.prevent=\"toggleDetails(item)\"\n              >V</button>\n            </td>\n            <td v-for=\"(column, cidx) in columns\" :key=\"cidx\">\n              <template v-if=\"column.code === 'avatar'\">\n                <img width=\"80\" height=\"80\" :src=\"item['avatar']\" alt />\n              </template>\n              <template v-else-if=\"column.code === 'sex'\">\n                <span v-if=\"item['sex'] === 'male'\">Chop</span>\n                <span v-else>Baba</span>\n              </template>\n              <template v-else-if=\"column.code === 'name'\">\n                <router-link :to=\"`details/${item['id']}`\">{{ item[column.code] }}</router-link>\n              </template>\n              <template v-else>{{ item[column.code] }}</template>\n            </td>\n            <!-- <td>{{item.id}}</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<router-link :to=\"`details/${item.id}`\">{{item.title}}</router-link>\n\t\t\t\t\t</td>\n            <td>{{item.author}}</td>-->\n          </tr>\n          <tr v-if=\"typeof item.details !== 'undefined' && item.detailsVisible\">\n            <td colspan=\"999\">\n              <strong>Opis:</strong>\n              {{ item.details.description }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { api } from \"../main.js\";\nimport filters from \"@/components/filters\";\nimport pagination from \"@/components/pagination\";\n\nexport default {\n  name: \"list\",\n  components: {\n      filters,\n      pagination,\n\t\t},\n  data() {\n    return {\n      showDetailsButton: true,\n      columnSortName: null,\n      columnSortOrder: \"asc\", // asc, desc\n      incurrent: null,\n      records:0,\n      total: 3,\n      current: 1,\n      columns: [\n        {\n          name: \"ID\",\n          code: \"id\",\n          is_sortable: true,\n          is_filterable: true,\n          datatype: \"string\",\n          query: \"\"\n        },\n        {\n          name: \"\",\n          code: \"avatar\",\n          is_sortable: false,\n          is_filterable: false,\n          datatype: \"string\",\n          query: \"\"\n        },\n        {\n          name: \"Name\",\n          code: \"name\",\n          is_sortable: true,\n          is_filterable: true,\n          datatype: \"string\",\n          query: \"\"\n        },\n        {\n          name: \"Sex\",\n          code: \"sex\",\n          is_sortable: true,\n          is_filterable: true,\n          datatype: [\"male\", \"female\"],\n          query: null\n        },\n        {\n          name: \"Phone\",\n          code: \"phone\",\n          is_sortable: false,\n          is_filterable: true,\n          datatype: \"string\",\n          query: \"\"\n        },\n        {\n          name: \"Email\",\n          code: \"email\",\n          is_sortable: false,\n          is_filterable: false,\n          datatype: \"string\",\n          query: \"\"\n        },\n        {\n          name: \"Is active\",\n          code: \"is_active\",\n          is_sortable: true,\n          is_filterable: true,\n          datatype: \"boolean\",\n          query: null\n        }\n      ],\n      listitems: [],\n      filters: []\n    };\n  },\n  computed: {},\n  created() {\n    this.askForPosts();\n  },\n  methods: {\n    objectToQuery(obj) {\n      return Object.keys(obj).reduce((str, key, i) => {\n        let delimiter = i === 0 ? \"?\" : \"&\";\n        let keyname = encodeURIComponent(key);\n        let val = encodeURIComponent(obj[key]);\n        return [str, delimiter, keyname, \"=\", val].join(\"\");\n      }, \"\");\n    },\n    async askForPosts() {\n      console.log(this.filters);\n      console.log(\"change page\");\n      const query = {\n        _sort: this.columnSortName,\n        _order: this.columnSortOrder,\n        _page: this.current,\n        q: this.filters.map(val => `${val.code}:${val.query}`).join(\"||\")\n      };\n      console.log(query, this.objectToQuery(query));\n      // google: object to url\n      const meta = { current: 1, total: 3 };\n      const { ok, data } = await api.get(`posts${this.objectToQuery(query)}`);\n      if (ok) {\n        this.listitems = data.map(r => ({ ...r, detailsVisible: false }));\n        //this.currentPage = meta.current;\n        this.total = meta.total;\n      }\n    },\n    setColumnSort(columnCode) {\n      if (columnCode === this.columnSortName) {\n        this.columnSortOrder = this.columnSortOrder === \"asc\" ? \"desc\" : \"asc\";\n      } else {\n        this.columnSortName = columnCode;\n      }\n      this.askForPosts();\n    },\n    toggleDetails(dataRow) {\n      dataRow.detailsVisible = !dataRow.detailsVisible;\n    },\n    onInput() {\n      let filters = this.columns.filter(\n        e => e.is_filterable && e.query != \"\" && e.query != null\n      );\n      this.filters = filters;\n      this.askForPosts();\n    },\n    pageInput() {\n      if (this.incurrent <= this.total && this.incurrent > 0) {\n        this.current = this.incurrent;\n        this.askForPosts();\n      } else {\n        this.incurrent = null;\n      }\n    },\n    onChange(column, element) {\n      console.log(column, element);\n    },\n    nextPage() {\n      if (this.current < this.total) this.current++;\n      this.askForPosts();\n      console.log(this.current);\n    },\n    previousPage() {\n      if (this.current > 1) this.current--;\n      this.askForPosts();\n      console.log(this.current);\n    },\n    firstPage() {\n      this.current = 1;\n      this.askForPosts();\n      console.log(this.current);\n    },\n    lastPage() {\n      this.current = this.total;\n      this.askForPosts();\n      console.log(this.current);\n    }\n  }\n};\n</script>\n\n<!-- ------======STYLE=====------ -->\n\n<style>\n.filters{\n  width:100%;\n  margin:auto;\n  padding:5%;\n}\n.tabelka {\n  overflow-x: auto;\n}\ntable {\n  width: 90%;\n  margin: auto;\n  border: 1px solid #fff;\n  background-color: #fff;\n}\ntr,\nth {\n  padding: 8px;\n}\ntr:nth-child(even) {\n  background-color: #ddd;\n  color: #222;\n}\n.pagination {\n  width: 30%;\n  margin: auto;\n  float: none;\n  padding-top: 30px;\n  display:block;\n}\ntr:hover {\n  background-color: #ddd;\n  color: #000;\n}\n\n@media only screen and (max-width: 760px) {\n  /* Force table to not be like tables anymore */\n  table,\n  thead,\n  tbody,\n  th,\n  td,\n  tr {\n    display: block;\n  }\n\n  /* Hide table headers (but not display: none;, for accessibility) */\n  thead tr {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n\n  tr {\n    border: 1px solid #ccc;\n  }\n\n  td {\n    /* Behave  like a \"row\" */\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n\n  td:before {\n    /* Now like a table header */\n    position: absolute;\n    /* Top/left values mimic padding */\n    top: 6px;\n    left: 6px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n  }\n}\n</style>\n"]}]}